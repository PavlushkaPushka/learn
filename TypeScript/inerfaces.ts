//////////////////////////https://www.youtube.com/watch?v=nyIpDs2DJ_c&t=2208s//////////////////////////////////////

// ====================================================================
//             Интерфейсы, это по сути просто то, что должны содержаать объекты (описание объекта)
// ====================================================================


interface Rect {
    readonly id: string
    color?: string // Добавлением знака вопроса, посути говорится о том, что элемент является не обязательным
    size: {
        width: number
        height: number
    }
}

const rect_1: Rect = {
    id: '1234',
    size: {
        width: 333,
        height: 333
    },
    color: '#ccc'
}
// айдишник нельзя поменять , т.к. это ридонлу проперти , то есть неизменяемая

const rect_2: Rect = {
    id: '12345',
    size: {
        width: 313,
        height: 33
    }

}

rect_2.color = 'black'

const rect_3 = {} as Rect
const rect_4 = <Rect>{}   // Вариант ранних  версий 

// ====================================================================
//              Наследование интерфейсов
// ====================================================================

interface RectWithArea extends Rect {

    getArea: () => number

}

const rect_5: RectWithArea = {
    id: '333',
    size: {
        width: 10,
        height: 10
    },

    getArea(): number {
        return this.size.width * this.size.height
    }
}


// ====================================================================
//             Интерфейсы могут взаимодействовать с классами
// ====================================================================

// ====================================================================
//             Интерфейсы желательно называть через "I", что означает - интерфейс
// ====================================================================


interface Iclock {
    time: Date,
    setTime(date: Date): void
}

// Инвентарь
class Clock implements Iclock {
    time: Date = new Date
    setTime(date: Date): void {
        this.time = date
    }
}



// ====================================================================
//             Иногда бывает, когда надо создать интерфейс для объекта , у которого будет большое количество динамических ключей
// ====================================================================

interface IStyles {
    // Но мы не можем сюда перечислить все css свойства , для чего, мы можем указать специальный синтаксис

    [key: string]: string
}

const css = {
    margin: 'left',
    borderRadius: '5px'
}

